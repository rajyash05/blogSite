{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Inital","props","state","arr1","initLoad","bind","fetch","rsp","json","data","this","setState","style","width","position","top","className","map","val","DispList","arr","React","Component","Header","to","pathname","title","desc","content","paddingTop","paddingBottom","author","DetailList","location","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yTA8BMA,E,YACN,WAAYC,GACX,IAAD,8BACE,4CAAMA,KACDC,MAAQ,CACXC,KAAM,IAER,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBALlB,E,4KAYmBC,MAAM,4D,cAAnBC,E,0BACcA,EAAIC,Q,OAAlBC,E,OACJC,KAAKC,SAAS,CACZR,KAAOM,I,2FAQPC,KAAKN,a,+BAMP,OAEE,yBAAKQ,MAAO,CAACC,MAAO,OAASC,SAAU,WAAaC,IAAK,QAG7D,wBAAKC,UAAU,YAEdN,KAAKR,MAAMC,KAAKc,KAAK,SAACC,GAAU,OAAO,kBAACC,EAAD,CAAUC,IAAKF,a,GAtClCG,IAAMC,WAiDrBC,EAAS,WACb,OACE,yBAAKP,UAAU,eACf,wBAAKA,UAAU,eAAf,eASJ,SAASG,EAAUlB,GAEf,OACA,kBAAC,IAAD,CAAMuB,GAAI,CACRC,SAAU,SACVvB,MAAO,CACLwB,MAAQzB,EAAMmB,IAAIM,MAClBC,KAAO1B,EAAMmB,IAAIQ,UAGlBZ,UAAU,UACX,wBAAIJ,MAAO,CAACiB,WAAY,MAAQC,cAAe,QAC7C,wBAAId,UAAU,iBAAmBf,EAAMmB,IAAIM,OAC3C,wBAAIV,UAAU,gBAAd,IAAgC,mCAAa,2BAAMf,EAAMmB,IAAIW,WAOrE,SAASC,EAAW/B,GAIpB,OAAQ,yBAAKe,UAAU,WAAU,gCAAQf,EAAMgC,SAAS/B,MAAMwB,MAA7B,KACjC,gCAAQzB,EAAMgC,SAAS/B,MAAMyB,KAA7B,MAKeO,MAlHf,WAEE,OAGE,6BACG,kBAAC,EAAD,MACH,kBAAC,IAAD,KAIF,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWrC,IAChC,kBAAC,IAAD,CAAOoC,KAAK,SAASD,OAAK,EAACE,UAAWL,QCRtBM,QACW,cAA7BC,OAAON,SAASO,UAEe,UAA7BD,OAAON,SAASO,UAEhBD,OAAON,SAASO,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.393c781e.chunk.js","sourcesContent":["import React from 'react';\nimport {BrowserRouter as Router, Switch ,Route, Link} from 'react-router-dom';\n\nimport './App.scss';\n\n\n\nfunction App() {\n\n  return (\n   \n   \n    <div>\n       <Header />\n    <Router >\n \n    \n   \n  <Switch >\n   <Route exact path=\"/\" component={Inital} />\n    <Route path=\"/about\" exact component={DetailList} />\n    </Switch>\n  \n    </Router>\n\n    </div>\n  );\n}\n\n\nclass Inital extends React.Component{\nconstructor(props)\n{\n  super(props);\n  this.state = {\n    arr1: [],\n  }\n  this.initLoad = this.initLoad.bind(this);\n}\n\n\nasync initLoad(){\n\n\n  let rsp =  await fetch(\"http://5e0f2c119576aa0014666435.mockapi.io/api/v1/blogs\");\n  let data =  await rsp.json();\n  this.setState({\n    arr1 : data,\n  })\n\n  }\n\n\n  componentDidMount(){\n\n    this.initLoad();\n  }\n\n\nrender() {\n\n  return (\n\n    <div style={{width: \"100%\" , position: \"absolute\" , top: \"15%\",}} >\n\n\n<ul  className=\"listPrnt\">\n {\n this.state.arr1.map( (val) => { return <DispList arr={val} ></DispList>; })\n }\n</ul>\n\n  </div>\n \n);\n}\n}\n\n\nconst Header = () => {\n  return (\n    <div className=\"headerStyle\">\n    <h1  className=\"headertitle\"   >\n    Blog list\n    </h1>\n  \n  </div>\n  );\n}\n\n\nfunction DispList (props) {\n\n    return (\n    <Link to={{\n      pathname: \"/about\" ,\n      state: {\n        title : props.arr.title ,\n        desc : props.arr.content,\n      }\n\n    }} className=\"listId\" >\n      <li style={{paddingTop: \"2px\" , paddingBottom: \"2px\",}}  >\n        <h2 className=\"dispListTitle\"  >{props.arr.title}</h2>\n        <h4 className=\"dispListAuth\"  > <b  >By  </b><i  >{props.arr.author}</i></h4>\n      </li>\n      </Link>\n      \n    );\n}\n\nfunction DetailList(props) {\n\n\n  \nreturn (<div className=\"descPnl\"><h1  > {props.location.state.title} </h1>\n<h3  > {props.location.state.desc} </h3> \n</div> );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}